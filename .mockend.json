[
    {
      "name": "Initialize Repository",
      "command": "git init",
      "syntax": "git init [directory]",
      "description": "Initialize a new Git repository in the current or specified directory.",
      "example": "git init my_project"
    },
    {
      "name": "Clone Repository",
      "command": "git clone",
      "syntax": "git clone [repository_url] [directory]",
      "description": "Clone an existing Git repository to a new directory on the local machine.",
      "example": "git clone https://github.com/user/repo.git my_repo"
    },
    {
      "name": "Add Files",
      "command": "git add",
      "syntax": "git add [file(s)]",
      "description": "Add files to the Git staging area, ready for a commit.",
      "example": "git add file1.txt file2.txt"
    },
    {
      "name": "Commit Changes",
      "command": "git commit",
      "syntax": "git commit -m [message]",
      "description": "Save changes made to the Git repository to the history with a specified commit message.",
      "example": "git commit -m 'Adding important files'"
    },
    {
      "name": "Push Changes",
      "command": "git push",
      "syntax": "git push [remote_name] [branch_name]",
      "description": "Push committed changes to a remote repository.",
      "example": "git push origin master"
    },
    {
      "name": "Pull Changes",
      "command": "git pull",
      "syntax": "git pull [remote_name] [branch_name]",
      "description": "Retrieve changes from a remote repository and merge them with the local repository.",
      "example": "git pull origin master"
    },
    {
      "name": "Check Status",
      "command": "git status",
      "syntax": "git status",
      "description": "Check the status of the Git repository and view changes that haven't been committed yet.",
      "example": "git status"
    },
    {
      "name": "View Commit History",
      "command": "git log",
      "syntax": "git log",
      "description": "View the history of commits in the Git repository.",
      "example": "git log"
    },
    {
      "name": "Create a Branch",
      "command": "git branch",
      "syntax": "git branch [branch_name]",
      "description": "Create a new branch in the Git repository.",
      "example": "git branch new_feature"
    },
    {
      "name": "Switch to a Branch",
      "command": "git checkout",
      "syntax": "git checkout [branch_name]",
      "description": "Switch to a different branch in the Git repository.",
      "example": "git checkout new_feature"
    },
    {
      "name": "Compare Branches",
      "command": "git diff",
      "syntax": "git diff [branch1] [branch2]",
      "description": "Compare the differences between two branches in the Git repository.",
      "example": "git diff master new_feature"
    },
    {
      "name": "Merge Branches",
      "command": "git merge",
      "syntax": "git merge [branch_name]",
      "description": "Merge changes from a specified branch into the current branch in the Git repository.",
      "example": "git merge new_feature"
    },
    {
      "name": "Rename a Branch",
      "command": "git branch",
      "syntax": "git branch -m [new_branch_name]",
      "description": "Rename the current branch in the Git repository.",
      "example": "git branch -m updated_feature"
    },
    {
      "name": "Delete a Branch",
      "command": "git branch",
      "syntax": "git branch -d [branch_name]",
      "description": "Delete a branch in the Git repository.",
      "example": "git branch -d outdated_feature"
    },
    {
      "name": "Reset Changes",
      "command": "git reset",
      "syntax": "git reset [file]",
      "description": "Reset changes made to a file in the Git repository.",
      "example": "git reset file1.txt"
    },
    {
      "name": "Undo Commit",
      "command": "git revert",
      "syntax": "git revert [commit_hash]",
      "description": "Undo a specific commit in the Git repository.",
      "example": "git revert abc123"
    },
    {
      "name": "Tag a Commit",
      "command": "git tag",
      "syntax": "git tag [tag_name] [commit_hash]",
      "description": "Add a tag to a specific commit in the Git repository.",
      "example": "git tag v1.0 abc123"
    },
    {
      "name": "Stash Changes",
      "command": "git stash",
      "syntax": "git stash",
      "description": "Temporarily save changes made to the Git repository without committing them.",
      "example": "git stash"
    },
    {
      "name": "Apply Stashed Changes",
      "command": "git stash apply",
      "syntax": "git stash apply",
      "description": "Apply changes that were stashed in the Git repository.",
      "example": "git stash apply"
    },
    {
      "name": "List Stashed Changes",
      "command": "git stash list",
      "syntax": "git stash list",
      "description": "List all stashed changes in the Git repository.",
      "example": "git stash list"
    },
    {
      "name": "Remove Stashed Changes",
      "command": "git stash drop",
      "syntax": "git stash drop",
      "description": "Remove stashed changes from the Git repository.",
      "example": "git stash drop"
    },
    {
      "name": "Show Commit Log",
      "command": "git log",
      "syntax": "git log",
      "description": "Display the commit history of the Git repository.",
      "example": "git log"
    },
    {
      "name": "Show Commit Differences",
      "command": "git show",
      "syntax": "git show [commit_hash]",
      "description": "Show the differences of a specific commit in the Git repository.",
      "example": "git show abc123"
    },
    {
      "name": "Fetch Remote Changes",
      "command": "git fetch",
      "syntax": "git fetch",
      "description": "Fetch updates from a remote repository to the local repository.",
      "example": "git fetch"
    },
    {
      "name": "Pull Remote Changes",
      "command": "git pull",
      "syntax": "git pull",
      "description": "Fetch and merge updates from a remote repository to the local repository.",
      "example": "git pull"
    },
    {
      "name": "Push Local Changes",
      "command": "git push",
      "syntax": "git push [remote_name] [branch_name]",
      "description": "Push local changes to a remote repository.",
      "example": "git push origin new_feature"
    },
    {
      "name": "Add Remote Repository",
      "command": "git remote add",
      "syntax": "git remote add [remote_name] [remote_url]",
      "description": "Add a remote repository to the local repository.",
      "example": "git remote add upstream https://github.com/upstream_repo.git"
    },
    {
      "name": "Remove Remote Repository",
      "command": "git remote remove",
      "syntax": "git remote remove [remote_name]",
      "description": "Remove a remote repository from the local repository.",
      "example": "git remote remove upstream"
    },
    {
      "name": "Show Remote Repositories",
      "command": "git remote show",
      "syntax": "git remote show [remote_name]",
      "description": "Show information about a remote repository in the local repository.",
      "example": "git remote show origin"
    }
  ]
